! Copyright (c) 2018  Robert RÃ¼ger
! Copyright (c) 2018  Software for Chemistry & Materials BV
!
! This file is part of of the Fortran Template Library.
!
! The Fortran Template Library is free software: you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public License as
! published by the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! The Fortran Template Library is distributed in the hope that it will be
! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
! General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public License along
! with the Fortran Template Library.  If not, see <http://www.gnu.org/licenses/>.

#define FTL_CONTAINER ftlHashSet
#define FTL_CONTAINER_PROVIDES_FORWARD_ITERATOR
#define FTL_CONTAINER_ITERATOR_IS_READONLY

#ifdef FTL_INSTANTIATE_TEMPLATE

#ifdef FTL_TEMPLATE_TYPE_IS_FTLSTRING
#define FTL_TEMPLATE_TYPE ftlString
#define FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_MODULE ftlStringModule
#endif

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlHashSet
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlHashSet
#endif

#include "ftlMacros.inc"

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_WRAP type(FTL_TEMPLATE_TYPE)
#else
#define FTL_TEMPLATE_TYPE_WRAP FTL_TEMPLATE_TYPE
#endif


module CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif

   use ftlKindsModule
   use ftlHashModule

   implicit none
   private

! ====== Type of the ftlHashSet container itself ============================================================================

   type :: BucketEntry
      type(DataEntry), pointer :: first => null()
   end type

   type :: DataEntry
      type(DataEntry), pointer  :: next => null()
      FTL_TEMPLATE_TYPE_WRAP    :: value
   end type


   type, public :: CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)
      private

      integer                        :: psize = 0
      real(FTL_KREAL)                :: maxLoadFactor = 1.0
      type(BucketEntry), allocatable :: buckets(:)

   contains
      private

      procedure            :: NewDefault
      procedure            :: NewCopyOther
      generic  , public    :: New => NewDefault, NewCopyOther
      generic  , public    :: assignment(=) => NewCopyOther

      procedure, public    :: Delete
      final                :: Finalizer

      procedure            :: BeginHashSet
      generic  , public    :: Begin => BeginHashSet
      procedure            :: EndHashSet
      generic  , public    :: End => EndHashSet

      procedure, public    :: Empty
      procedure            :: SizeHashSet
      generic  , public    :: Size => SizeHashSet

      procedure            :: InsertStandard
      generic  , public    :: Insert => InsertStandard
      procedure            :: HasStandard
      generic  , public    :: Has => HasStandard

      procedure, pass(rhs) :: OperatorInStandard
      generic  , public    :: operator(.in.) => OperatorInStandard

      procedure, public    :: FindStandard
      generic  , public    :: Find => FindStandard

      procedure            :: EraseValue
      procedure            :: EraseSingleIterator
      procedure            :: EraseIteratorPair
      generic  , public    :: Erase => EraseValue, EraseSingleIterator, EraseIteratorPair

      procedure, public    :: Clear

      procedure, public    :: BucketCount
      procedure, public    :: BucketSize
      procedure            :: BucketStandard
      generic  , public    :: Bucket => BucketStandard

      procedure, public    :: LoadFactor
      procedure, public    :: SetMaxLoadFactor
      procedure, public    :: GetMaxLoadFactor
      procedure, public    :: Rehash
      procedure, public    :: Reserve

#ifdef FTL_TEMPLATE_TYPE_IS_FTLSTRING
      procedure            :: Insert_SPECIALIZATION_ftlString
      generic  , public    :: Insert => Insert_SPECIALIZATION_ftlString
      procedure            :: Has_SPECIALIZATION_ftlString
      generic  , public    :: Has => Has_SPECIALIZATION_ftlString
      procedure, pass(rhs) :: OperatorIn_SPECIALIZATION_ftlString
      generic  , public    :: operator(.in.) => OperatorIn_SPECIALIZATION_ftlString
      procedure            :: Find_SPECIALIZATION_ftlString
      generic  , public    :: Find => Find_SPECIALIZATION_ftlString
      procedure            :: EraseValue_SPECIALIZATION_ftlString
      generic  , public    :: Erase => EraseValue_SPECIALIZATION_ftlString
      procedure            :: Bucket_SPECIALIZATION_ftlString
      generic  , public    :: Bucket => Bucket_SPECIALIZATION_ftlString
#endif

   end type

   public :: Begin
   interface Begin
      module procedure BeginHashSet
   end interface

   public :: End
   interface End
      module procedure EndHashSet
   end interface

   public :: Size
   interface Size
      module procedure SizeHashSet
   end interface


! ====== Type of an iterator over a ftlHashSet container =========================================================================

   type, public :: CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)
      private

      type(BucketEntry)     , pointer         :: buckets(:) => null()
      integer                                 :: bIdx = 0
      type(DataEntry)       , pointer         :: entr => null()
      FTL_TEMPLATE_TYPE_WRAP, pointer, public :: value => null() ! <--- TO BE USED READ ONLY!!!

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
      ! This component only serves to work around a bug in gfortran 6.x.
      ! It's never allocated and it can be removed once we start requiring GCC 7+.
      ! https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61767
      logical, allocatable :: dummy
#endif

   contains
      private

      procedure         :: NewItDefault
      procedure         :: NewItCopyOther
      generic  , public :: New => NewItDefault, NewItCopyOther

      procedure, public :: Inc

   end type

   public :: operator(==)
   interface operator(==)
      module procedure EqualOther
   end interface

   public :: operator(/=)
   interface operator(/=)
      module procedure UnequalOther
   end interface


contains



! ====== Implementation of ftlHashSet methods ====================================================================================


   subroutine NewDefault(self, n)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
      integer                                      , intent(in)  :: n

      allocate(self%buckets(n))

   end subroutine
   !
   impure elemental subroutine NewCopyOther(self, other)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(out), target :: self
       type(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) , target :: other

      class(DataEntry), pointer :: getter, putter
      integer :: b

      self%psize = other%psize
      self%maxLoadFactor = other%maxLoadFactor
      if (allocated(other%buckets)) then
         allocate(self%buckets(size(other%buckets)))
         do b = 1, size(self%buckets)

            ! nothing to do for empty buckets
            if (.not.associated(other%buckets(b)%first)) cycle

            getter => other%buckets(b)%first
            allocate(self%buckets(b)%first)
            putter => self%buckets(b)%first
            putter%value = getter%value

            do while (associated(getter%next))
               getter => getter%next
               allocate(putter%next)
               putter => putter%next
               putter%value = getter%value
            enddo

         enddo
      endif

   end subroutine



   elemental subroutine Delete(self)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      call self%Clear()

      if (allocated(self%buckets)) deallocate(self%buckets)
      self%maxLoadFactor = 1.0

   end subroutine
   !
   elemental subroutine Finalizer(self)
      type(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      call self%Delete()
   end subroutine



   ! =============> Iterators:



   type(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)) function BeginHashSet(self) result(Begin)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      Begin%buckets => self%buckets
      Begin%bIdx = 1

      do while (Begin%bIdx <= size(Begin%buckets))
         if (associated(Begin%buckets(Begin%bIdx)%first)) then
            Begin%entr => Begin%buckets(Begin%bIdx)%first
            Begin%value => Begin%entr%value
            return
         endif
         Begin%bIdx = Begin%bIdx + 1
      enddo

   end function



   type(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)) function EndHashSet(self) result(End)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      End%buckets => self%buckets
      End%bIdx = size(self%buckets) + 1

   end function



   ! =============> Capacity:



   pure logical function Empty(self)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Empty = (self%psize == 0)

   end function



   pure integer function SizeHashSet(self) result(size)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      size = self%psize

   end function



   ! =============> Element access:



   subroutine InsertStandard(self, value)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self
      FTL_TEMPLATE_TYPE_WRAP                       , intent(in)            :: value

      integer :: b
      class(DataEntry), pointer :: entr

      b = self%Bucket(value)
      if (.not.associated(self%buckets(b)%first)) then
         allocate(self%buckets(b)%first)
         self%buckets(b)%first%value = value
      else
         entr => self%buckets(b)%first
         do while (.true.)
            if (value == entr%value) then
               return
            endif
            if (associated(entr%next)) then
               entr => entr%next
            else
               allocate(entr%next)
               entr%next%value = value
               exit
            endif
         enddo
      endif

      self%psize = self%psize + 1
      if (self%LoadFactor() > self%maxLoadFactor) call self%Rehash(2 * self%BucketCount())

   end subroutine



   logical function HasStandard(self, value) result(Has)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self
      FTL_TEMPLATE_TYPE_WRAP                       , intent(in)         :: value

      type(DataEntry), pointer :: entr

      entr => self%buckets(self%Bucket(value))%first
      do while (associated(entr))
         if (value == entr%value) then
            Has = .true.
            return
         endif
         entr => entr%next
      end do
      Has = .false.

   end function
   !
   logical function OperatorInStandard(lhs, rhs) result(in)
      FTL_TEMPLATE_TYPE_WRAP                       , intent(in)         :: lhs
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: rhs

      in = rhs%Has(lhs)

   end function



   type(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)) function FindStandard(self, value) result(Find)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self
      FTL_TEMPLATE_TYPE_WRAP                       , intent(in)         :: value

      Find%buckets => self%buckets
      Find%bidx = self%Bucket(value)
      Find%entr => Find%buckets(Find%bidx)%first

      do while (associated(Find%entr))
         if (value == Find%entr%value) then
            Find%value => Find%entr%value
            return
         endif
         Find%entr => Find%entr%next
      end do

      ! Not found? Let's make the End() iterator ...
      Find%bIdx = size(self%buckets) + 1
      nullify(Find%entr)

   end function



   ! =============> Modifiers:



   subroutine EraseValue(self, value)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_TYPE_WRAP                       , intent(in)    :: value

      type(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: it

      it = self%Find(value)
      if (it /= self%End()) call self%EraseSingleIterator(it)

   end subroutine
   !
   subroutine EraseSingleIterator(self, it)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME))         , intent(inout), target :: self
      type(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout)         :: it

      type(DataEntry), pointer :: entr

      if (.not.associated(it%buckets,self%buckets)) return

      if (associated(it%entr, self%buckets(it%bIdx)%first)) then
         self%buckets(it%bIdx)%first => it%entr%next
      else
         entr => self%buckets(it%bIdx)%first
         do while (.not.associated(entr%next,it%entr))
            entr => entr%next
         enddo
         entr%next => it%entr%next
      endif
      deallocate(it%entr)
      self%psize = self%psize - 1

   end subroutine
   !
   subroutine EraseIteratorPair(self, first, last)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first, last

      type(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: walker, deleter

      walker = first
      do while (walker /= last)
         deleter = walker
         call walker%Inc()
         call self%EraseSingleIterator(deleter)
      end do

   end subroutine



   elemental subroutine Clear(self)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      integer :: b
      type(DataEntry), pointer :: walker, deleter

      if (allocated(self%buckets)) then
         do b = 1, size(self%buckets)
            if (.not.associated(self%buckets(b)%first)) cycle
            walker  => self%buckets(b)%first
            deleter => walker
            do while (associated(walker%next))
               walker => walker%next
               deallocate(deleter)
               deleter => walker
            enddo
            deallocate(deleter)
         enddo
      endif
      self%psize = 0

   end subroutine



   ! =============> Buckets:



   pure integer function BucketCount(self)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      if (allocated(self%buckets)) then
         BucketCount = size(self%buckets)
      else
         BucketCount = 0
      endif

   end function



   integer function BucketSize(self, n)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self
      integer                                      , intent(in)         :: n

      type(DataEntry), pointer :: entr

      entr => self%buckets(n)%first
      if (.not.associated(entr)) then
         BucketSize = 0
      else
         BucketSize = 1
         do while (associated(entr%next))
            BucketSize = BucketSize + 1
            entr => entr%next
         enddo
      endif

   end function



   pure integer function BucketStandard(self, key) result(Bucket)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self
      FTL_TEMPLATE_TYPE_WRAP                    , intent(in) :: key

      Bucket = mod(ftlHash(key), size(self%buckets)) + 1

   end function



   ! =============> Hash policy:



   pure real(FTL_KREAL) function LoadFactor(self)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      LoadFactor = real(self%psize, FTL_KREAL) / real(self%BucketCount(), FTL_KREAL)

   end function
   !
   pure real(FTL_KREAL) function GetMaxLoadFactor(self)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      GetMaxLoadFactor = self%maxLoadFactor

   end function
   !
   subroutine SetMaxLoadFactor(self, maxLoadFactor)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      real(FTL_KREAL)                              , intent(in)    :: maxLoadFactor

      if (maxLoadFactor > 0.0) then
         self%maxLoadFactor = maxLoadFactor
         if (self%LoadFactor() > self%maxLoadFactor) call self%Rehash(2 * self%BucketCount())
      endif

   end subroutine



   subroutine Rehash(self, n)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self
      integer                                      , intent(in)            :: n

      type(BucketEntry), allocatable, target :: newbuckets(:)
      type(DataEntry), pointer :: eorg, tmp, enew
      integer :: borg, bnew

      if (n <= 0) return

      allocate(newbuckets(n))

      do borg = 1, size(self%buckets)
         eorg => self%buckets(borg)%first
         do while (associated(eorg))

            tmp => eorg
            eorg => eorg%next
            nullify(tmp%next)

            bnew = mod(ftlHash(tmp%value), n) + 1
            if (.not.associated(newbuckets(bnew)%first)) then
               newbuckets(bnew)%first => tmp
            else
               enew => newbuckets(bnew)%first
               do while (associated(enew%next))
                  enew => enew%next
               enddo
               enew%next => tmp
            endif

         enddo
      enddo

      call move_alloc(newbuckets, self%buckets)

   end subroutine



   subroutine Reserve(self, n)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                      , intent(in)    :: n

      if (n > self%BucketCount() * self%maxLoadFactor) call self%Rehash(ceiling(n / self%maxLoadFactor))

   end subroutine



#ifdef FTL_TEMPLATE_TYPE_IS_FTLSTRING

   ! =============> Template specialization for ftlString as a value type:

   ! For all methods that accept a value, we define alternatives that accept a normal Fortran string instead of an ftlString.
   ! This is mostly so that we can provide a nicer interface, where you can do
   !
   !     call Insert('my value')
   !
   ! instead of
   !
   !     call Insert(ftlString('my value'))
   !
   ! It's a small thing, but no reason not to do it ...

   subroutine Insert_SPECIALIZATION_ftlString(self, value)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      character(len=*)                             , intent(in)    :: value

      call self%Insert(ftlString(value))

   end subroutine

   logical function Has_SPECIALIZATION_ftlString(self, value) result(Has)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self
      character(len=*)                             , intent(in) :: value

      Has = self%Has(ftlString(value))

   end function

   logical function OperatorIn_SPECIALIZATION_ftlString(lhs, rhs) result(in)
      character(len=*)                             , intent(in)         :: lhs
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: rhs

      in = rhs%Has(ftlString(lhs))

   end function

   type(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)) &
   function Find_SPECIALIZATION_ftlString(self, value) result(Find)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self
      character(len=*)                             , intent(in) :: value

      Find = self%Find(ftlString(value))

   end function

   subroutine EraseValue_SPECIALIZATION_ftlString(self, value)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      character(len=*)                             , intent(in)    :: value

      call self%EraseValue(ftlString(value))

   end subroutine

   integer function Bucket_SPECIALIZATION_ftlString(self, value) result(Bucket)
      class(CAT(ftlHashSet,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self
      character(len=*)                             , intent(in) :: value

      Bucket = self%Bucket(ftlString(value))

   end function

#endif



! ====== Implementation of ftlHashSetIterator methods ============================================================================



   subroutine NewItDefault(self)
      class(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      nullify(self%buckets)
      self%bIdx = 0
      nullify(self%entr)
      nullify(self%value)

   end subroutine
   !
   subroutine NewItCopyOther(self, other)
      class(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self
      class(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)  :: other

      self%buckets => other%buckets
      self%bIdx = other%bIdx
      self%entr => other%entr
      if (associated(self%entr)) self%value => self%entr%value

   end subroutine



   ! =============> Arithmetic operations:



   subroutine Inc(self)
      class(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      if (associated(self%entr%next)) then
         self%entr  => self%entr%next
         self%value => self%entr%value
      else
         do while (.true.)
            self%bIdx = self%bIdx + 1
            if (self%bIdx > size(self%buckets)) then
               nullify(self%entr)
               nullify(self%value)
               return
            endif
            if (associated(self%buckets(self%bIdx)%first)) then
               self%entr  => self%buckets(self%bIdx)%first
               self%value => self%entr%value
               return
            endif
         enddo
      endif

   end subroutine



   ! =============> Logical operations:



   pure logical function EqualOther(self, other)
      class(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      EqualOther = &
          associated(self%entr, other%entr) .or. &
         (associated(self%buckets, other%buckets) .and. (self%bIdx == size(self%buckets) + 1) .and. (self%bIdx == other%bIdx) )

   end function
   !
   pure logical function UnequalOther(self, other)
      class(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlHashSet,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      UnequalOther = .not.EqualOther(self, other)

   end function


end module
#endif
