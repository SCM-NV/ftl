! Copyright (c) 2016, 2017  Robert RÃ¼ger
! Copyright (c) 2018  Software for Chemistry & Materials BV
!
! This file is part of of the Fortran Template Library.
!
! The Fortran Template Library is free software: you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public License as
! published by the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! The Fortran Template Library is distributed in the hope that it will be
! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
! General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public License along
! with the Fortran Template Library.  If not, see <http://www.gnu.org/licenses/>.

#define FTL_CONTAINER ftlDynArray
#define FTL_CONTAINER_PROVIDES_RANDOM_ACCESS_ITERATOR

#ifdef FTL_INSTANTIATE_TEMPLATE

#ifdef FTL_TEMPLATE_TYPE_IS_FTLSTRING
#define FTL_TEMPLATE_TYPE ftlString
#define FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_MODULE ftlStringModule
#define FTL_TEMPLATE_TYPE_PROVIDES_FTLMOVE
#endif

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlDynArray
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlDynArray
#endif

#include "ftlMacros.inc"

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_WRAP type(FTL_TEMPLATE_TYPE)
#else
#define FTL_TEMPLATE_TYPE_WRAP FTL_TEMPLATE_TYPE
#endif


module CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif

   implicit none
   private

! ====== Type of the ftlDynArray container itself ================================================================================

   type, public :: CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)
      private

      integer                                     :: psize = 0
      FTL_TEMPLATE_TYPE_WRAP, allocatable         :: storage(:)
      FTL_TEMPLATE_TYPE_WRAP, pointer    , public :: data(:) => null()
      FTL_TEMPLATE_TYPE_WRAP, pointer    , public :: front => null()
      FTL_TEMPLATE_TYPE_WRAP, pointer    , public :: back => null()

   contains
      private

      procedure         :: NewDefault
      procedure         :: NewCopyOther
      procedure         :: NewFill
      procedure         :: NewFromArray
      generic  , public :: New => NewDefault, NewCopyOther, NewFill, NewFromArray

      procedure         :: AssignOther
      procedure         :: AssignArray
      generic  , public :: assignment(=) => AssignOther, AssignArray

      procedure, public :: Delete
      final             :: Finalizer

      procedure         :: BeginDynArray
      generic  , public :: Begin => BeginDynArray
      procedure         :: EndDynArray
      generic  , public :: End => EndDynArray

      procedure         :: SizeDynArray
      generic  , public :: Size => SizeDynArray

      procedure, public :: Capacity
      procedure, public :: Empty
      procedure, public :: Reserve
      procedure, public :: ShrinkToFit

      procedure         :: ResizeStandard
      generic  , public :: Resize => ResizeStandard
      procedure         :: PushBackStandard
      generic  , public :: PushBack => PushBackStandard
      procedure, public :: PopBack

      procedure         :: InsertSingle
      procedure         :: InsertSingleAtIndex
      procedure         :: InsertFill
      procedure         :: InsertFillAtIndex
      procedure         :: InsertArray
      procedure         :: InsertArrayAtIndex
      procedure         :: InsertIteratorPair
      procedure         :: InsertIteratorPairAtIndex
      generic  , public :: Insert => InsertSingle, InsertFill, InsertArray, InsertIteratorPair, &
                                     InsertSingleAtIndex, InsertFillAtIndex, InsertArrayAtIndex, InsertIteratorPairAtIndex

      procedure         :: EraseSingle
      procedure         :: EraseSingleIndex
      procedure         :: EraseIndexPair
      procedure         :: EraseIteratorPair
      generic  , public :: Erase => EraseSingle, EraseSingleIndex, EraseIndexPair, EraseIteratorPair

      procedure, public :: Clear

#ifdef FTL_TEMPLATE_TYPE_IS_FTLSTRING
      procedure         :: NewFill_SPECIALIZATION_ftlString
      procedure         :: NewFromArray_SPECIALIZATION_ftlString
      generic  , public :: New => NewFill_SPECIALIZATION_ftlString, NewFromArray_SPECIALIZATION_ftlString
      procedure         :: AssignArray_SPECIALIZATION_ftlString
      generic  , public :: assignment(=) => AssignArray_SPECIALIZATION_ftlString
      procedure         :: Resize_SPECIALIZATION_ftlString
      generic  , public :: Resize => Resize_SPECIALIZATION_ftlString
      procedure         :: PushBack_SPECIALIZATION_ftlString
      generic  , public :: PushBack => PushBack_SPECIALIZATION_ftlString
      procedure         :: InsertSingle_SPECIALIZATION_ftlString
      procedure         :: InsertSingleAtIndex_SPECIALIZATION_ftlString
      procedure         :: InsertFill_SPECIALIZATION_ftlString
      procedure         :: InsertFillAtIndex_SPECIALIZATION_ftlString
      procedure         :: InsertArray_SPECIALIZATION_ftlString
      procedure         :: InsertArrayAtIndex_SPECIALIZATION_ftlString
      generic  , public :: Insert => InsertSingle_SPECIALIZATION_ftlString, InsertSingleAtIndex_SPECIALIZATION_ftlString, &
                                     InsertFill_SPECIALIZATION_ftlString, InsertFillAtIndex_SPECIALIZATION_ftlString, &
                                     InsertArray_SPECIALIZATION_ftlString, InsertArrayAtIndex_SPECIALIZATION_ftlString
#endif

      procedure         :: FixValuePtrs
      procedure         :: ShiftByN
      procedure         :: ChangeCapacity
      procedure         :: IncreaseCapacity

   end type

   public :: Begin
   interface Begin
      module procedure BeginDynArray
   end interface

   public :: End
   interface End
      module procedure EndDynArray
   end interface

   public :: Size
   interface Size
      module procedure SizeDynArray
   end interface


   ! FTL methods:

   public :: ftlSwap
   interface ftlSwap
      module procedure ftlSwapDynArray
   end interface

   public :: ftlMove
   interface ftlMove
      module procedure ftlMoveDynArray
      module procedure ftlMoveArrayToDynArray
   end interface


! ====== Type of an iterator over a ftlDynArray container ========================================================================

   type, public :: CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)
      private

      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), pointer         :: dynArray => null()
      integer                                                         :: index = 0
      FTL_TEMPLATE_TYPE_WRAP                        , pointer, public :: value => null()

   contains
      private

      procedure         :: NewItDefault
      procedure         :: NewItCopyOther
      generic  , public :: New => NewItDefault, NewItCopyOther

      procedure, public :: Inc
      procedure, public :: Dec

      ! Overloaded operators:

      procedure, pass(lhs) :: AdvanceN
      generic  , public    :: operator(+) => AdvanceN

      procedure, pass(lhs) :: ReverseN
      procedure, pass(lhs) :: DiffOther
      generic  , public    :: operator(-) => ReverseN, DiffOther

      procedure, pass(lhs) :: EqualOther
      generic  , public    :: operator(==) => EqualOther

      procedure, pass(lhs) :: UnequalOther
      generic  , public    :: operator(/=) => UnequalOther

      procedure, pass(lhs) :: SmallerOther
      generic  , public    :: operator(<) => SmallerOther

      procedure, pass(lhs) :: SmallerEqualOther
      generic  , public    :: operator(<=) => SmallerEqualOther

      procedure, pass(lhs) :: GreaterOther
      generic  , public    :: operator(>) => GreaterOther

      procedure, pass(lhs) :: GreaterEqualOther
      generic  , public    :: operator(>=) => GreaterEqualOther

   end type


contains



! ====== Implementation of ftlDynArray methods ===================================================================================


   subroutine NewDefault(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self

      allocate(self%storage(0))
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine NewCopyOther(self, other)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
       type(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in)  :: other

      integer :: i

      allocate(self%storage(other%psize))
      do i = 1, other%psize
         self%storage(i) = other%storage(i)
      enddo
      self%psize = other%psize
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine NewFill(self, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out)          :: self
      integer                                       , intent(in)           :: n
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in), optional :: val

      integer :: i

      allocate(self%storage(n))
      if (present(val)) then
         do i = 1, n
            self%storage(i) = val
         enddo
      endif
      self%psize = n
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine NewFromArray(self, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)  :: array(:)

      integer :: i

      allocate(self%storage(size(array)))
      do i = 1, size(array)
         self%storage(i) = array(i)
      enddo
      self%psize = size(array)
      call self%FixValuePtrs()

   end subroutine



   impure elemental subroutine Delete(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      self%psize = 0
      if (allocated(self%storage)) deallocate(self%storage)
      nullify(self%data)
      nullify(self%front)
      nullify(self%back)

   end subroutine
   !
   impure elemental subroutine Finalizer(self)
      type(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call self%Delete()

   end subroutine



   subroutine AssignArray(self, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: array(:)

      integer :: i

      if (.not.allocated(self%storage)) then
         call self%New(array)
      else if (size(self%storage) < size(array)) then
         call self%New(array)
      else
         do i = 1, size(array)
            self%storage(i) = array(i)
         enddo
         do i = size(array)+1, size(self%storage)
            call TriggerFinalizer(self%storage(i))
         enddo
         self%psize = size(array)
         call self%FixValuePtrs()
      endif

   end subroutine
   !
   impure elemental subroutine AssignOther(self, other)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
       type(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in)    :: other

      if (.not.allocated(other%storage)) then
         ! other wasn't initialized, i.e. it's constructor wasn't called ...
         call self%Delete()
      else
         call self%AssignArray(other%data)
      endif

   end subroutine



   ! =============> Iterators:



   type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function BeginDynArray(self) result(Begin)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      Begin%dynArray => self
      Begin%index = 1
      if (self%psize /= 0) Begin%value => self%storage(1)

   end function



   type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function EndDynArray(self) result(End)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      End%dynArray => self
      End%index = self%psize + 1

   end function



   ! =============> Capacity:



   pure integer function SizeDynArray(self) result(Size)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Size = self%psize

   end function



   pure integer function Capacity(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      if (allocated(self%storage)) then
         Capacity = size(self%storage)
      else
         Capacity = 0
      endif

   end function



   pure logical function Empty(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Empty = (self%psize == 0)

   end function



   subroutine Reserve(self, n)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: n

      if (n > self%Capacity()) call self%ChangeCapacity(n)
      call self%FixValuePtrs()

   end subroutine



   subroutine ShrinkToFit(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call self%ChangeCapacity(self%psize)
      call self%FixValuePtrs()

   end subroutine



   ! =============> Modifiers:



   subroutine ResizeStandard(self, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout)        :: self
      integer                                       , intent(in)           :: n
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in), optional :: val

      integer :: i

      if (n == self%psize) return

      if (n > self%Capacity()) call self%ChangeCapacity(n)
      do i = n+1, self%psize
         call TriggerFinalizer(self%storage(i))
      enddo
      if (present(val) .and. n > self%psize) then
         do i = self%psize+1, n
            self%storage(i) = val
         enddo
      endif
      self%psize = n
      call self%FixValuePtrs()

   end subroutine



   subroutine PushBackStandard(self, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: val

      if (self%psize + 1 > self%Capacity()) call self%IncreaseCapacity()
      self%psize = self%psize + 1
      self%storage(self%psize) = val
      call self%FixValuePtrs()

   end subroutine



   FTL_TEMPLATE_TYPE_WRAP function PopBack(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

#ifdef FTL_TEMPLATE_TYPE_PROVIDES_FTLMOVE
      call ftlMove(self%storage(self%psize), PopBack)
#else
      PopBack = self%storage(self%psize)
      call TriggerFinalizer(self%storage(self%psize))
#endif
      self%psize = self%psize - 1
      call self%FixValuePtrs()

   end function



   subroutine InsertSingleAtIndex(self, position, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: val

      call self%ShiftByN(position, 1)
      self%storage(position) = val
      self%psize = self%psize + 1
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine InsertSingle(self, position, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      FTL_TEMPLATE_TYPE_WRAP                                 , intent(in)    :: val

      call self%InsertSingleAtIndex(position%index, val)

   end subroutine
   !
   subroutine InsertFillAtIndex(self, position, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      integer                                       , intent(in)    :: n
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: val

      integer :: i

      if (n <= 0) return
      call self%ShiftByN(position, n)
      do i = 1, n
         self%storage(position+i-1) = val
      enddo
      self%psize = self%psize + n
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine InsertFill(self, position, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      integer                                                , intent(in)    :: n
      FTL_TEMPLATE_TYPE_WRAP                                 , intent(in)    :: val

      call self%InsertFillAtIndex(position%index, n, val)

   end subroutine
   !
   subroutine InsertArrayAtIndex(self, position, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: array(:)

      integer :: i

      if (size(array) == 0) return
      call self%ShiftByN(position, size(array))
      do i = 1, size(array)
         self%storage(position+i-1) = array(i)
      enddo
      self%psize = self%psize + size(array)
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine InsertArray(self, position, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      FTL_TEMPLATE_TYPE_WRAP                                 , intent(in)    :: array(:)

      call self%InsertArrayAtIndex(position%index, array)

   end subroutine
   !
   subroutine InsertIteratorPairAtIndex(self, position, first, last)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      integer                                                , intent(in)    :: position
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      call self%InsertArrayAtIndex(position, first%dynArray%data(first%index:last%index-1))

   end subroutine
   !
   subroutine InsertIteratorPair(self, position, first, last)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      call self%InsertArrayAtIndex(position%index, first%dynArray%data(first%index:last%index-1))

   end subroutine



   subroutine EraseSingle(self, position)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position

      call self%EraseIndexPair(position%index, position%index+1)

   end subroutine
   !
   subroutine EraseSingleIndex(self, position)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position

      call self%EraseIndexPair(position, position+1)

   end subroutine
   !
   subroutine EraseIndexPair(self, first, last)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: first
      integer                                       , intent(in)    :: last

      integer :: i, numerased

      if (last <= first) return

      numerased = last - first

      do i = first, self%psize - numerased
#ifdef FTL_TEMPLATE_TYPE_PROVIDES_FTLMOVE
         call ftlMove(self%storage(i+numerased), self%storage(i))
#else
         self%storage(i) = self%storage(i+numerased)
         call TriggerFinalizer(self%storage(i+numerased))
#endif
      enddo

      self%psize = self%psize - numerased
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine EraseIteratorPair(self, first, last)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      call self%EraseIndexPair(first%index, last%index)

   end subroutine



   subroutine Clear(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call self%EraseIndexPair(1, self%psize+1)

   end subroutine



#ifdef FTL_TEMPLATE_TYPE_IS_FTLSTRING

   ! =============> Template specialization for ftlString as a type:

   ! For all methods that accept a key, we define alternatives that accept a normal Fortran string instead of an ftlString.
   ! This is mostly so that we can provide a nicer interface, where you can do
   !
   !     call PushBack('my key')
   !
   ! instead of
   !
   !     call PushBack(ftlString('my key'))
   !
   ! It's a small thing, but no reason not to do it ...

   subroutine NewFill_SPECIALIZATION_ftlString(self, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
      integer                                       , intent(in)  :: n
      character(*)                                  , intent(in)  :: val

      call self%NewFill(n, ftlString(val))

   end subroutine

   subroutine NewFromArray_SPECIALIZATION_ftlString(self, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
      character(len=*)                              , intent(in)  :: array(:)

      integer :: i

      allocate(self%storage(size(array)))
      do i = 1, size(array)
         self%storage(i) = array(i)
      enddo
      self%psize = size(array)
      call self%FixValuePtrs()

   end subroutine

   subroutine AssignArray_SPECIALIZATION_ftlString(self, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      character(*)                                  , intent(in)    :: array(:)

      integer :: i

      if (.not.allocated(self%storage)) then
         call self%New(array)
      else if (size(self%storage) < size(array)) then
         call self%New(array)
      else
         do i = 1, size(array)
            self%storage(i) = array(i)
         enddo
         do i = size(array)+1, size(self%storage)
            call self%storage(i)%Delete()
         enddo
         self%psize = size(array)
         call self%FixValuePtrs()
      endif

   end subroutine

   subroutine Resize_SPECIALIZATION_ftlString(self, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: n
      character(*)                                  , intent(in)    :: val

      call self%Resize(n, ftlString(val))

   end subroutine

   subroutine PushBack_SPECIALIZATION_ftlString(self, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      character(len=*)                              , intent(in)    :: val

      call self%PushBack(ftlString(val))

   end subroutine

   subroutine InsertSingleAtIndex_SPECIALIZATION_ftlString(self, position, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      character(*)                                  , intent(in)    :: val

      call self%InsertSingleAtIndex(position, ftlString(val))

   end subroutine
   !
   subroutine InsertSingle_SPECIALIZATION_ftlString(self, position, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      character(*)                                           , intent(in)    :: val

      call self%InsertSingleAtIndex(position%index, ftlString(val))

   end subroutine
   !
   subroutine InsertFillAtIndex_SPECIALIZATION_ftlString(self, position, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      integer                                       , intent(in)    :: n
      character(*)                                  , intent(in)    :: val

      call self%InsertFillAtIndex(position, n, ftlString(val))

   end subroutine
   !
   subroutine InsertFill_SPECIALIZATION_ftlString(self, position, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      integer                                                , intent(in)    :: n
      character(*)                                           , intent(in)    :: val

      call self%InsertFillAtIndex(position%index, n, ftlString(val))

   end subroutine
   !
   subroutine InsertArrayAtIndex_SPECIALIZATION_ftlString(self, position, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      character(*)                                  , intent(in)    :: array(:)

      integer :: i

      if (size(array) == 0) return
      call self%ShiftByN(position, size(array))
      do i = 1, size(array)
         self%storage(position+i-1) = array(i)
      enddo
      self%psize = self%psize + size(array)
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine InsertArray_SPECIALIZATION_ftlString(self, position, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      character(*)                                           , intent(in)    :: array(:)

      call self%InsertArrayAtIndex_SPECIALIZATION_ftlString(position%index, array)

   end subroutine

#endif



   ! =============> Internal methods:



   subroutine FixValuePtrs(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      if (allocated(self%storage)) then
         self%data => self%storage(1:self%psize)
      else
         nullify(self%data)
      endif
      if (self%psize == 0) then
         ! not strictly necessary, because it will always crash if someone accesses front/back on an empty dynArray ...
         nullify(self%front, self%back)
      else
         self%front => self%storage(1)
         self%back => self%storage(self%psize)
      endif

   end subroutine



   subroutine ShiftByN(self, from, n)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: from
      integer                                       , intent(in)    :: n

      integer :: i

      if (self%psize + n > 2 * self%Capacity()) then
         call self%ChangeCapacity(self%psize + n)
      elseif (self%psize + n > self%Capacity()) then
         call self%IncreaseCapacity()
      endif

      do i = self%psize, from, -1
#ifdef FTL_TEMPLATE_TYPE_PROVIDES_FTLMOVE
         call ftlMove(self%storage(i), self%storage(i+n))
#else
         self%storage(i+n) = self%storage(i)
#endif
      enddo

   end subroutine



   subroutine ChangeCapacity(self, n)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: n

      FTL_TEMPLATE_TYPE_WRAP, allocatable :: newstorage(:)
      integer :: i, numretain

      if (n == self%Capacity()) return

      allocate(newstorage(n))

      if (allocated(self%storage)) then
         numretain = min(self%psize, n)
         do i = 1, numretain
#ifdef FTL_TEMPLATE_TYPE_PROVIDES_FTLMOVE
            call ftlMove(self%storage(i), newstorage(i))
#else
            newstorage(i) = self%storage(i)
            call TriggerFinalizer(self%storage(i))
#endif
         enddo
      endif

      call move_alloc(newstorage, self%storage)

   end subroutine



   subroutine IncreaseCapacity(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call self%changeCapacity(max(2 * self%Capacity(), 1))

   end subroutine



   impure elemental subroutine TriggerFinalizer(instance)
      FTL_TEMPLATE_TYPE_WRAP, intent(out) :: instance

      ! Nothing to do here: intent(out) will finalize the instance and that's all we want.
      return
      instance = instance ! <--- suppresses unhelpful compiler warnings about not assigning instance

   end subroutine



   ! =============> FTL methods:



   subroutine ftlSwapDynArray(dArr1, dArr2)
      type(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: dArr1, dArr2

      FTL_TEMPLATE_TYPE_WRAP, allocatable :: tmpstorage(:)
      integer :: tmppsize

      call move_alloc(dArr1%storage, tmpstorage)
      call move_alloc(dArr2%storage, dArr1%storage)
      call move_alloc(tmpstorage, dArr2%storage)

      tmppsize = dArr1%psize
      dArr1%psize = dArr2%psize
      dArr2%psize = tmppsize

      call dArr1%FixValuePtrs()
      call dArr2%FixValuePtrs()

   end subroutine



   subroutine ftlMoveDynArray(src, dest)
      type(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: src
      type(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out)   :: dest

      call move_alloc(src%storage, dest%storage)
      dest%psize = src%psize
      call dest%FixValuePtrs()
      call src%Delete()

   end subroutine
   !
   subroutine ftlMoveArrayToDynArray(src, dest)
      FTL_TEMPLATE_TYPE_WRAP, allocatable          , intent(inout) :: src(:)
      type(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out)   :: dest

      call move_alloc(src, dest%storage)
      dest%psize = size(dest%storage)
      call dest%FixValuePtrs()

   end subroutine



! ====== Implementation of ftlDynArrayIterator methods ===========================================================================



   subroutine NewItDefault(self)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      nullify(self%dynArray)
      self%index = 0
      nullify(self%value)

   end subroutine
   !
   subroutine NewItCopyOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self
       type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)  :: other

      self%dynArray => other%dynArray
      self%index = other%index
      if (self%dynArray%psize > 0 .and. self%index <= self%dynArray%psize) self%value => self%dynArray%storage(self%index)

   end subroutine



   ! =============> Arithmetic operations:



   subroutine Inc(self)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      self%index = self%index + 1
      if (self%index <= self%dynArray%psize) then
         self%value => self%dynArray%storage(self%index)
      else
         nullify(self%value)
      endif

   end subroutine
   !
   subroutine Dec(self)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      self%index = self%index - 1
      if (self%index > 0) then
         self%value => self%dynArray%storage(self%index)
      else
         nullify(self%value)
      endif

   end subroutine



   type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function AdvanceN(lhs, n)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
      integer                                                 , intent(in) :: n

      call AdvanceN%New(lhs)
      AdvanceN%index = AdvanceN%index + n
      if (AdvanceN%index <= AdvanceN%dynArray%psize) then
         AdvanceN%value => AdvanceN%dynArray%storage(AdvanceN%index)
      else
         nullify(AdvanceN%value)
      endif

   end function
   !
   type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function ReverseN(lhs, n)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
      integer                                                 , intent(in) :: n

      call ReverseN%New(lhs)
      ReverseN%index = ReverseN%index - n
      if (ReverseN%index > 0) then
         ReverseN%value => ReverseN%dynArray%storage(ReverseN%index)
      else
         nullify(ReverseN%value)
      endif

   end function



   pure integer function DiffOther(lhs, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
       type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      if (associated(lhs%dynArray,other%dynArray)) then
         DiffOther = lhs%index - other%index
      else
         DiffOther = huge(0)
      endif

   end function



   ! =============> Logical operations:



   pure logical function EqualOther(lhs, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
       type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      EqualOther = associated(lhs%dynArray,other%dynArray) .and. (lhs%index == other%index)

   end function
   !
   pure logical function UnequalOther(lhs, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
       type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      UnequalOther = .not.associated(lhs%dynArray,other%dynArray) .or. (lhs%index /= other%index)

   end function
   !
   pure logical function SmallerOther(lhs, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
       type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      SmallerOther = associated(lhs%dynArray,other%dynArray) .and. (lhs%index < other%index)

   end function
   !
   pure logical function SmallerEqualOther(lhs, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
       type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      SmallerEqualOther = associated(lhs%dynArray,other%dynArray) .and. (lhs%index <= other%index)

   end function
   !
   pure logical function GreaterOther(lhs, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
       type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      GreaterOther = associated(lhs%dynArray,other%dynArray) .and. (lhs%index > other%index)

   end function
   !
   pure logical function GreaterEqualOther(lhs, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: lhs
       type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      GreaterEqualOther = associated(lhs%dynArray,other%dynArray) .and. (lhs%index >= other%index)

   end function


end module
#endif
