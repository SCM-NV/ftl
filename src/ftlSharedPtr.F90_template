! Copyright (c) 2016, 2017  Robert RÃ¼ger
!
! This file is part of of the Fortran Template Library.
!
! The Fortran Template Library is free software: you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public License as
! published by the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! The Fortran Template Library is distributed in the hope that it will be
! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
! General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public License along
! with the Fortran Template Library.  If not, see <http://www.gnu.org/licenses/>.

#ifdef FTL_INSTANTIATE_TEMPLATE

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlAlgorithms
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlAlgorithms
#endif

#include "ftlMacros.inc"

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_WRAP type(FTL_TEMPLATE_TYPE)
#else
#define FTL_TEMPLATE_TYPE_WRAP FTL_TEMPLATE_TYPE
#endif


module CAT3(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif

   implicit none
   private

   type, public :: CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)
      private

      FTL_TEMPLATE_TYPE_WRAP, pointer, public :: value => null()
      integer               , pointer         :: refcount => null()

   contains
      private

      procedure, public :: Allocate
      procedure, public :: AssumeOwnershipOf
      procedure         :: ShareOwnershipWith
      generic  , public :: assignment(=) => ShareOwnershipWith
      procedure, public :: Nullify
      final             :: Finalizer

      procedure         :: AssociatedDefault
      procedure         :: AssociatedOther
      procedure         :: AssociatedRaw
      generic  , public :: Associated => AssociatedDefault, AssociatedOther, AssociatedRaw

      procedure, public :: UseCount
      procedure, public :: Unique

      procedure, public :: Swap

   end type

   public :: ftlSwap
   interface ftlSwap
       module procedure Swap
   end interface

   public :: ftlMove
   interface ftlMove
      module procedure ftlMoveSharedPtr
   end interface

contains



! ====== Implementation of ftlSharedPtr methods ==================================================================================


   subroutine Allocate(self)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self

      allocate(self%value)
      allocate(self%refcount)
      self%refcount = 1

   end subroutine



   subroutine AssumeOwnershipOf(self, p)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
      FTL_TEMPLATE_TYPE_WRAP, pointer                , intent(in)  :: p

      self%value => p
      allocate(self%refcount)
      self%refcount = 1

   end subroutine



   impure elemental subroutine ShareOwnershipWith(self, other)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
      type (CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(in)  :: other

      self%value => other%value
      self%refcount => other%refcount
      if (associated(self%refcount)) self%refcount = self%refcount + 1

   end subroutine



   subroutine Nullify(self)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call Finalizer(self)

   end subroutine
   !
   impure elemental subroutine Finalizer(self)
      type(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      if (.not. associated(self%refcount)) then
         return
      else if (self%refcount == 1) then
         deallocate(self%value)
         deallocate(self%refcount)
      else if (self%refcount > 1) then
         self%refcount = self%refcount - 1
         nullify(self%value, self%refcount)
      endif

   end subroutine



   pure logical function AssociatedDefault(self) result(assoc)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      assoc = associated(self%value)

   end function
   !
   pure logical function AssociatedOther(sp1, sp2) result(assoc)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: sp1
      type (CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: sp2

      assoc = associated(sp1%value, sp2%value)

   end function
   !
   pure logical function AssociatedRaw(sp, p) result(assoc)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: sp
      FTL_TEMPLATE_TYPE_WRAP, pointer                , intent(in) :: p

      assoc = associated(sp%value, p)

   end function



   pure integer function UseCount(self)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      if (associated(self%refcount)) then
         UseCount = self%refcount
      else
         UseCount = 0
      endif

   end function



   pure logical function Unique(self)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Unique = (self%useCount() == 1)

   end function



   subroutine Swap(self, other)
      class(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      type (CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: other

      FTL_TEMPLATE_TYPE_WRAP, pointer :: tmpValue
      integer               , pointer :: tmpRefcount

      tmpValue => self%value
      self%value => other%value
      other%value => tmpValue

      tmpRefcount => self%refcount
      self%refcount => other%refcount
      other%refcount => tmpRefcount

   end subroutine



   impure elemental subroutine ftlMoveSharedPtr(src, dest)
      type(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: src
      type(CAT(ftlSharedPtr,FTL_TEMPLATE_TYPE_NAME)), intent(out)   :: dest

      dest%value => src%value
      dest%refcount => src%refcount

      nullify(src%value)
      nullify(src%refcount)

   end subroutine


end module
#endif
